apply plugin: 'com.android.application'

android {
    compileSdkVersion COMPILE_SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "com.frodo.android.test"
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        debug {
            // Run code coverage reports by default on debug builds.
            // testCoverageEnabled = true
        }
    }

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            applicationId "com.frodo.android.test.mock"
        }
        prod {
        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

/*
 Dependency versions are defined in the top level build.gradle file. This helps keeping track of
 all versions in a single place. This improves readability and helps managing project complexity.
 */
dependencies {
    // App's dependencies, including test
    compile project(':app')
    compile libraries.appcompat_v7
    compile libraries.cardview_v7
    compile libraries.design
    compile libraries.recyclerview_v7

    compile libraries.guava
    compile libraries.glide
    compile libraries.android_test_espresso_idling_resource

    // Dependencies for local unit tests
    testCompile libraries.junit
    testCompile libraries.mockito
    testCompile libraries.hamcrest
    testCompile libraries.powermock_module_junit4
    testCompile libraries.powermock_api_mockito

    // Android Testing Support Library's runner and rules
    androidTestCompile libraries.android_runner
    androidTestCompile libraries.android_rules

    // Espresso UI Testing dependencies.
    androidTestCompile libraries.android_test_espresso_core
    androidTestCompile libraries.android_test_espresso_contrib
    androidTestCompile libraries.android_test_espresso_intents
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force libraries.support_annotations
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}